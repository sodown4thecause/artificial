create table if not exists billing_customers (
    user_id uuid primary key references auth.users (id) on delete cascade,
    stripe_customer_id text unique not null,
    stripe_subscription_id text,
    plan_id text,
    status text,
    current_period_end timestamptz,
    created_at timestamptz default now() not null,
    updated_at timestamptz default now() not null
);

create table if not exists billing_events (
    id bigint generated by default as identity primary key,
    stripe_event_id text unique not null,
    type text not null,
    data jsonb not null,
    customer_id text,
    user_id uuid references auth.users (id) on delete set null,
    created_at timestamptz default now() not null
);

create index if not exists billing_events_customer_id_idx on billing_events (customer_id);
create index if not exists billing_events_user_id_idx on billing_events (user_id);

-- keep updated_at in sync on updates
create or replace function public.handle_billing_customers_updated_at()
returns trigger as $$
begin
    new.updated_at = timezone('utc', now());
    return new;
end;
$$ language plpgsql;

drop trigger if exists on_billing_customers_updated on billing_customers;
create trigger on_billing_customers_updated
before update on billing_customers
for each row execute function public.handle_billing_customers_updated_at();

